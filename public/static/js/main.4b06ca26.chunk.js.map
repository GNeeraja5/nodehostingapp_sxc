{"version":3,"sources":["logo.svg","Component1.jsx","Component2.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Component1","react_default","a","createElement","Helmet","property","content","React","Component","Component2","App","BrowserRouter","className","src","logo","alt","href","target","rel","Link","to","Switch","Route","path","Component2_Component2","Component1_Component1","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wQCGnBC,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,OAAD,KACEH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,QAAME,SAAS,WAAWC,QAAQ,sBAClCL,EAAAC,EAAAC,cAAA,QAAME,SAAS,UAAUC,QAAQ,YACjCL,EAAAC,EAAAC,cAAA,QAAME,SAAS,SAASC,QAAQ,mCAChCL,EAAAC,EAAAC,cAAA,QACEE,SAAS,WACTC,QAAQ,2CAEVL,EAAAC,EAAAC,cAAA,QAAME,SAAS,eAAeC,QAAQ,oBACtCL,EAAAC,EAAAC,cAAA,QAAME,SAAS,YAAYC,QAAQ,wBACnCL,EAAAC,EAAAC,cAAA,QACEE,SAAS,iBACTC,QAAQ,gEAjBoBC,IAAMC,WCAzBC,mLAEjB,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,OAAD,KACEH,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,QAAME,SAAS,WAAWC,QAAQ,sBAClCL,EAAAC,EAAAC,cAAA,QAAME,SAAS,UAAUC,QAAQ,YACjCL,EAAAC,EAAAC,cAAA,QAAME,SAAS,SAASC,QAAQ,mCAChCL,EAAAC,EAAAC,cAAA,QACEE,SAAS,WACTC,QAAQ,2CAEVL,EAAAC,EAAAC,cAAA,QAAME,SAAS,eAAeC,QAAQ,oBACtCL,EAAAC,EAAAC,cAAA,QAAME,SAAS,YAAYC,QAAQ,wBACnCL,EAAAC,EAAAC,cAAA,QACEE,SAAS,iBACTC,QAAQ,wDAGZL,EAAAC,EAAAC,cAAA,2CApBgCI,IAAMC,2CCoC/BE,mLA7BX,OACET,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACAV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAAA,UAAQS,UAAU,cAChBX,EAAAC,EAAAC,cAAA,OAAKU,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCd,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACES,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASFjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMC,GAAI,KAAV,QAfF,YAgBEnB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMC,GAAI,UAAV,SACAnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,KAAK,UAAStB,EAAAC,EAAAC,cAACqB,EAAD,OACrBvB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,KAAK,KAAItB,EAAAC,EAAAC,cAACsB,EAAD,iBAvBRjB,aCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4b06ca26.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nexport default class Component1 extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Helmet>\r\n          <title>first component</title>\r\n          <meta property=\"og:title\" content=\"About Our Company\" />\r\n          <meta property=\"og:type\" content=\"article\" />\r\n          <meta property=\"og:url\" content=\"http://www.mysite.com/article/\" />\r\n          <meta\r\n            property=\"og:image\"\r\n            content=\"http://www.mysite.com/articleimage.jpg\"\r\n          />\r\n          <meta property=\"og:site_name\" content=\"My Company Name\" />\r\n          <meta property=\"fb:app_id\" content=\"1234567890987654321\" />\r\n          <meta\r\n            property=\"og:description\"\r\n            content=\"A description of our services and company profile.\"\r\n          />\r\n        </Helmet>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nexport default class Component2 extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Helmet>\r\n          <title>second component</title>\r\n          <meta property=\"og:title\" content=\"About Our Company\" />\r\n          <meta property=\"og:type\" content=\"article\" />\r\n          <meta property=\"og:url\" content=\"http://www.mysite.com/article/\" />\r\n          <meta\r\n            property=\"og:image\"\r\n            content=\"http://www.mysite.com/articleimage.jpg\"\r\n          />\r\n          <meta property=\"og:site_name\" content=\"My Company Name\" />\r\n          <meta property=\"fb:app_id\" content=\"1234567890987654321\" />\r\n          <meta\r\n            property=\"og:description\"\r\n            content=\"A description of our services and company profile.\"\r\n          />\r\n        </Helmet>\r\n        <div>I am from Component2</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Helmet } from 'react-helmet';\nimport Component1 from './Component1';\nimport Component2 from './Component2';\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <Link to={\"/\"} >Home</Link>&nbsp; &nbsp;\n        <Link to={\"/about\"} >About</Link>\n        <Switch>\n          <Route path=\"/about\"><Component2 /></Route>\n          <Route path=\"/\"><Component1 /></Route>\n        </Switch>\n      </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}